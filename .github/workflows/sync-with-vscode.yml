name: Sync with VSCode Upstream

on:
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync mode'
        required: true
        default: 'check-only'
        type: choice
        options:
          - check-only
          - auto-merge
          - create-pr
      
      target_branch:
        description: 'Target branch'
        required: true
        default: 'vscode-upstream-sync'
        type: string
  
  schedule:
    - cron: '0 2 * * 0'
  
  push:
    branches: 
      - main
    paths:
      - '.github/workflows/sync-with-vscode.yml'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  check-updates:
    name: Check VSCode Updates
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      behind_count: ${{ steps.check.outputs.behind_count }}
      update_summary: ${{ steps.check.outputs.summary }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "Apileum Bot"
          git config --global user.email "bot@apileum.com"
      
      - name: Add VSCode Upstream
        run: |
          if ! git remote | grep -q "^vscode-upstream$"; then
            git remote add vscode-upstream https://github.com/microsoft/vscode.git
          fi
          
          echo "Fetching from VSCode upstream..."
          git fetch vscode-upstream main --tags --force
      
      - name: Check if Behind Upstream
        id: check
        run: |
          UPSTREAM_HEAD=$(git rev-parse vscode-upstream/main)
          echo "VSCode HEAD: $UPSTREAM_HEAD"
          
          if git merge-base --is-ancestor $UPSTREAM_HEAD HEAD; then
            echo "Already up to date with VSCode"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "behind_count=0" >> $GITHUB_OUTPUT
          else
            BEHIND_COUNT=$(git rev-list --count HEAD..vscode-upstream/main)
            echo "We are $BEHIND_COUNT commits behind VSCode"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
            
            echo "Generating update summary..."
            SUMMARY=$(git log HEAD..vscode-upstream/main --oneline --max-count=10 --pretty=format:"- %s by %an")
            
            # Guardar resumen de forma segura
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Display Check Results
        run: |
          if [ "${{ steps.check.outputs.has_updates }}" = "true" ]; then
            echo "Updates available from VSCode!"
            echo "Behind by: ${{ steps.check.outputs.behind_count }} commits"
            echo "Recent changes:"
            echo "${{ steps.check.outputs.summary }}"
          else
            echo "Already synchronized with VSCode"
          fi

  sync-upstream:
    name: Sync with VSCode
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    
    env:
      SYNC_BRANCH: ${{ github.event.inputs.target_branch || 'vscode-upstream-sync' }}
      SYNC_MODE: ${{ github.event.inputs.sync_mode || 'create-pr' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config --global user.name "Apileum Bot"
          git config --global user.email "bot@apileum.com"
          git config --global merge.ours.driver true
      
      - name: Add VSCode Upstream
        run: |
          git remote add vscode-upstream https://github.com/microsoft/vscode.git
          git fetch vscode-upstream main --tags --force
      
      - name: Create Sync Branch
        id: create_branch
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SYNC_BRANCH_FULL="${SYNC_BRANCH}-${TIMESTAMP}"
          
          echo "Creating branch: $SYNC_BRANCH_FULL"
          git checkout -b "$SYNC_BRANCH_FULL" origin/main
          
          echo "branch_name=$SYNC_BRANCH_FULL" >> $GITHUB_OUTPUT
      
      - name: Setup Merge Attributes
        run: |
          cat > .gitattributes << 'GITATTRIBUTES'
          # Preserve Apileum files during merge
          product.json merge=ours
          package.json merge=ours
          src/vs/apileum/** merge=ours
          extensions/apileum-* merge=ours
          .github/workflows/sync-with-vscode.yml merge=ours
          README.md merge=ours
          GITATTRIBUTES
          
          git add .gitattributes
          git commit -m "Setup merge attributes" || true
      
      - name: Attempt Merge
        id: merge
        continue-on-error: true
        run: |
          echo "Attempting to merge VSCode upstream..."
          
          if git merge vscode-upstream/main --no-edit -X theirs --allow-unrelated-histories -m "Sync with VSCode upstream $(date +%Y-%m-%d)"; then
            echo "Merge successful!"
            echo "merge_success=true" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            
            echo "Conflicted files:"
            git diff --name-only --diff-filter=U | tee conflicted_files.txt
          fi
      
      - name: Auto-Resolve Conflicts
        if: steps.merge.outputs.merge_success == 'false'
        id: resolve
        run: |
          echo "Attempting automatic conflict resolution..."
          
          cat > resolve_conflicts.sh << 'RESOLVE_SCRIPT'
          #!/bin/bash
          
          OUR_FILES=(
            "product.json"
            "package.json"
            "README.md"
          )
          
          THEIR_FILES=(
            "src/vs/base/*"
            "src/vs/platform/*"
            "src/vs/editor/common/*"
          )
          
          for file in $(git diff --name-only --diff-filter=U); do
            echo "Processing: $file"
            
            for our_pattern in "${OUR_FILES[@]}"; do
              if [[ "$file" == $our_pattern ]]; then
                echo "  Keeping our version"
                git checkout --ours "$file"
                git add "$file"
                continue 2
              fi
            done
            
            for their_pattern in "${THEIR_FILES[@]}"; do
              if [[ "$file" == $their_pattern ]]; then
                echo "  Taking VSCode version"
                git checkout --theirs "$file"
                git add "$file"
                continue 2
              fi
            done
            
            echo "  Manual resolution needed"
          done
          RESOLVE_SCRIPT
          
          chmod +x resolve_conflicts.sh
          ./resolve_conflicts.sh
          
          if [ -z "$(git diff --name-only --diff-filter=U)" ]; then
            echo "All conflicts resolved automatically"
            git commit -m "Auto-resolved merge conflicts"
            echo "conflicts_resolved=true" >> $GITHUB_OUTPUT
          else
            echo "Manual intervention required for:"
            git diff --name-only --diff-filter=U
            echo "conflicts_resolved=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate Merge
        if: steps.merge.outputs.merge_success == 'true' || steps.resolve.outputs.conflicts_resolved == 'true'
        id: validate
        run: |
          echo "Running validation tests..."
          
          npm ci
          
          echo "Testing compilation..."
          if npm run compile-cli; then
            echo "Compilation successful"
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "Compilation failed"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Checking Apileum files..."
          REQUIRED_FILES=(
            "product.json"
            "src/vs/apileum"
            "extensions/apileum-cobol"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          
          echo "All validations passed"
      
      - name: Push Changes
        if: steps.validate.outputs.validation_passed == 'true'
        run: |
          git push origin "${{ steps.create_branch.outputs.branch_name }}"
      
      - name: Create Pull Request
        if: env.SYNC_MODE == 'create-pr' || steps.resolve.outputs.conflicts_resolved == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create_branch.outputs.branch_name }}
          base: main
          title: "Sync with VSCode upstream - ${{ needs.check-updates.outputs.behind_count }} commits"
          body: |
            ## VSCode Upstream Sync
            
            This PR syncs our fork with the latest changes from VSCode upstream.
            
            ### Summary
            - **Behind by**: ${{ needs.check-updates.outputs.behind_count }} commits
            - **Sync mode**: ${{ env.SYNC_MODE }}
            - **Auto-resolved**: ${{ steps.resolve.outputs.conflicts_resolved == 'true' && 'Yes' || 'No' }}
            
            ### Recent VSCode Changes
            ${{ needs.check-updates.outputs.update_summary }}
            
            ### Validation Results
            - Compilation: ${{ steps.validate.outputs.validation_passed == 'true' && 'Passed' || 'Failed' }}
            - Apileum files: Preserved
            
            ### Review Checklist
            - [ ] Apileum customizations are preserved
            - [ ] No breaking changes in our extensions
            - [ ] Tests are passing
            - [ ] Documentation is updated if needed
            
            ---
            *This PR was automatically created by the VSCode sync workflow*
          labels: |
            upstream-sync
            automated
            vscode-update
          reviewers: |
            ${{ github.repository_owner }}
      
      - name: Auto-Merge if Configured
        if: env.SYNC_MODE == 'auto-merge' && steps.validate.outputs.validation_passed == 'true'
        run: |
          echo "Auto-merging to main..."
          git checkout main
          git merge "${{ steps.create_branch.outputs.branch_name }}" --no-edit
          git push origin main

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [check-updates, sync-upstream]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          {
            echo "## VSCode Sync Summary"
            echo ""
            
            if [ "${{ needs.check-updates.outputs.has_updates }}" == "true" ]; then
              echo "### Update Status"
              echo "- **Updates available**: Yes"
              echo "- **Commits behind**: ${{ needs.check-updates.outputs.behind_count }}"
              echo ""
              echo "### Recent Changes"
              echo "\`\`\`"
              echo "${{ needs.check-updates.outputs.update_summary }}"
              echo "\`\`\`"
            else
              echo "**Already up to date with VSCode**"
            fi
            
            echo ""
            echo "---"
            echo "*Run time: $(date)*"
          } >> $GITHUB_STEP_SUMMARY
